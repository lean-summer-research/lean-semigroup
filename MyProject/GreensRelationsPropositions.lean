import MyProject.GreensRelations

/-!
# Propositions about Green's Relations

This file contains proofs of basic results about Green's Relations.
This includes the compatibility of ‚â§·µ£, ‚â§‚Çó, ‚â§‚±º/‚â°·µ£, ‚â°‚Çó, ‚â°‚±º with multiplication,
the commutativity of ‚â°·µ£ and ‚â°‚Çó, and the definition of ùìì = ùì°ùìõ = ùìõùì°.

Names as follows--
* le_R.lmult_compat : left-compatibility of ‚â§·µ£ with multiplication
* le_L.rmult_compat : right-compatibility of ‚â§‚Çó with multiplication
* R_rel.lmult_compat : left-compatibility of ‚â°·µ£ with multiplication
* L_rel.rmult_compat : right-compatibility of ‚â°‚Çó with multiplication
* R_L commute : commutativity of  ‚â°·µ£ and ‚â°‚Çó

## Green's D_Relation
Define Green's ùìì-relation on a monoid M as ùì°ùìõ.
That is, a ‚â°·¥∞ b if there exists x such that a ‚â°·µ£ x and x ‚â°·µ£ b.
We also show this is equivalent to the composition in the other order-- ùìì = ùìõùì°.

## Definitions

* `D_rel` : The Green's ùìì relation
* `D_rel_def` : `a ‚â°·¥∞ b` ‚Üî ‚àÉ x, a ‚â°·µ£ x ‚àß x ‚â°‚Çó b
* `D_rel_alt` : `a ‚â°·¥∞ b` ‚Üî ‚àÉ x, a ‚â°‚Çó x ‚àß x ‚â°·µ£ b
-/
variable {M} [Monoid M]

theorem le_R.lmult_compat {a b c : M} (h : a ‚â§·µ£ b) : c * a ‚â§·µ£ c * b := by
  obtain ‚ü®x, hx‚ü© := h
  use x
  rw [hx, mul_assoc]

theorem le_L.rmult_compat {a b c : M} (h : a ‚â§‚Çó b) : a * c ‚â§‚Çó b * c := by
  obtain ‚ü®x, hx‚ü© := h
  use x
  rw [‚Üê mul_assoc, hx]

theorem R_rel.lmult_compat {a b c : M} (h : a ‚â°·µ£ b) : c * a ‚â°·µ£ c * b := by
  constructor
  ¬∑ exact le_R.lmult_compat h.left
  ¬∑ rw [R_rel] at h
    apply le_R.lmult_compat h.right

theorem L_rel.rmult_compat {a b c : M} (h : a ‚â°‚Çó b) : a * c ‚â°‚Çó b * c := by
  constructor
  ¬∑ exact le_L.rmult_compat h.left
  ¬∑ rw [L_rel] at h
    apply le_L.rmult_compat h.right


def rel_composition {Œ± : Type*} (r s : Œ± ‚Üí Œ± ‚Üí Prop) : Œ± ‚Üí Œ± ‚Üí Prop :=
  Œª a c => ‚àÉ b, r a b ‚àß s b c

notation:50 f " ‚àò·¥ø " g:50 => rel_composition f g

theorem R_L_commute {a b: M}: (L_rel ‚àò·¥ø R_rel) a b ‚Üî (R_rel ‚àò·¥ø L_rel) a b:= by
  unfold rel_composition
  constructor
  ¬∑ rintro ‚ü®c, hr, hl‚ü©
    obtain ‚ü®u, hu‚ü© := hr.left
    obtain ‚ü®v, hv‚ü© := hl.right
    let x := u * c * v
    use x
    constructor
    have h1 : u * c ‚â°·µ£ u * b := R_rel.lmult_compat hl
    have hx : x = u * b := calc
      x = u * c * v := rfl
      _ = u * (c * v) := by rw[‚Üê mul_assoc]
      _ = u * b := by rw [hv]
    rw[hu, hx]
    exact h1

    have h2 : a * v ‚â°‚Çó c * v := L_rel.rmult_compat hr
    have hx : x = a * v := calc
      x = u * c * v := rfl
      _ = (u * c) * v := by rw[mul_assoc]
      _ = a * v := by rw [hu]
    rw[hv, hx]
    exact h2

  ¬∑ rintro ‚ü®c, hl, hr‚ü©
    obtain ‚ü®u, hu‚ü© := hl.left
    obtain ‚ü®v, hv‚ü© := hr.right
    let x := v * c * u
    use x
    constructor
    have h1 : b * u ‚â°‚Çó c * u := L_rel.rmult_compat hr.symm
    have hx : x = b * u := calc
      x = v * c * u := rfl
      _ = (v * c) * u := by rw [mul_assoc]
      _ = b * u := by rw [hv]
    rw [hu, hx]
    exact h1.symm

    have h2 : v * a  ‚â°·µ£ v * c := R_rel.lmult_compat hl
    have hx : x = v * a := calc
      x = v * c * u := rfl
      _ = v * (c * u) := by rw [mul_assoc]
      _ = v * a := by rw [hu]
    rw [hv, hx]
    exact h2



def D_rel (a b : M) : Prop :=
  ‚àÉ x : M, a ‚â°·µ£ x ‚àß x ‚â°‚Çó b

infix:50 " ‚â°·¥∞ " => D_rel

theorem D_rel_def {a b : M} : a ‚â°·¥∞ b ‚Üî ‚àÉ x : M, a ‚â°·µ£ x ‚àß x ‚â°‚Çó b :=
  Iff.rfl

def D_rel_alt (a b : M) : Prop :=
  ‚àÉ x : M, a ‚â°‚Çó x ‚àß x ‚â°·µ£ b

theorem D_rel_alt_def {a b : M} : a ‚â°·¥∞ b ‚Üî D_rel_alt a b := by
  unfold D_rel D_rel_alt
  constructor
  ¬∑ rintro ‚ü®x, ha, hb‚ü©
    obtain ‚ü®y, hb1, ha1‚ü© := (R_L_commute.mp) ‚ü®x, hb.symm, ha.symm‚ü©
    exact ‚ü®y, ha1.symm, hb1.symm‚ü©
  ¬∑ rintro ‚ü®x, ha, hb‚ü©
    obtain ‚ü®y, hb2, ha2‚ü© := (R_L_commute.mpr) ‚ü®x, hb.symm, ha.symm‚ü©
    exact ‚ü®y, ha2.symm, hb2.symm‚ü©
